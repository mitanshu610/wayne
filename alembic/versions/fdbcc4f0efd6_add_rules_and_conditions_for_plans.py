"""Add rules and conditions for plans

Revision ID: fdbcc4f0efd6
Revises: e6585dc01222
Create Date: 2025-01-22 22:54:24.883855

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fdbcc4f0efd6'
down_revision: Union[str, None] = 'e6585dc01222'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rules',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('scope', sa.Enum('ORGANISATION', 'USER', name='scopeenum'), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('feature_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['feature_id'], ['features.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_rules_feature_id'), 'rules', ['feature_id'], unique=False)
    op.create_index(op.f('ix_rules_scope'), 'rules', ['scope'], unique=False)
    op.create_table('plan_rules',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('rule_id', sa.UUID(), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ),
    sa.ForeignKeyConstraint(['rule_id'], ['rules.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('plan_id', 'rule_id', name='uq_plan_rule')
    )
    op.create_index(op.f('ix_plan_rules_plan_id'), 'plan_rules', ['plan_id'], unique=False)
    op.create_index(op.f('ix_plan_rules_rule_id'), 'plan_rules', ['rule_id'], unique=False)
    op.create_table('rule_conditions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('rule_id', sa.UUID(), nullable=False),
    sa.Column('condition_key', sa.String(), nullable=False),
    sa.Column('operator', sa.Enum('EQUAL', 'GREATER_THAN', 'LESS_THAN', 'GREATER_THAN_OR_EQUAL', 'LESS_THAN_OR_EQUAL', name='operatorenum'), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('time_period', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['rule_id'], ['rules.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_rule_conditions_rule_id'), 'rule_conditions', ['rule_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_rule_conditions_rule_id'), table_name='rule_conditions')
    op.drop_table('rule_conditions')
    op.drop_index(op.f('ix_plan_rules_rule_id'), table_name='plan_rules')
    op.drop_index(op.f('ix_plan_rules_plan_id'), table_name='plan_rules')
    op.drop_table('plan_rules')
    op.drop_index(op.f('ix_rules_scope'), table_name='rules')
    op.drop_index(op.f('ix_rules_feature_id'), table_name='rules')
    op.drop_table('rules')
    # ### end Alembic commands ###
